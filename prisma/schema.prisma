// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                               String    @id @default(cuid())
  name                             String?
  email                            String?   @unique
  password                         String?
  emailVerified                    DateTime?
  emailVerificationToken           String?
  emailVerificationTokenExpiration DateTime?
  image                            String?
  accounts                         Account[]
  sessions                         Session[]

  PasswordResetToken PasswordResetToken[]
  UserInformation    UserInformation[]
  Videos             Videos[]
  Subscriptions      Subscriptions[]
  CartItem           CartItem[]
  Social             Social[]
  Ticket             Ticket[]
  Comment            Comment[]
}

//  Admin user model for the admin dashboard
model AdminUser {
  id       String    @id @default(cuid())
  name     String?
  email    String?   @unique
  password String?
  Ticket   Ticket[]
  Comment  Comment[]
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  userId  String
  token   String   @unique
  expires DateTime

  user User @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserInformation {
  id                   String   @id @default(cuid())
  userId               String   @unique
  artistBio            String?
  firstName            String
  lastName             String
  artistName           String
  label                String
  phone                String
  country              String
  howDidYouHearAboutUs String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  User User @relation(fields: [userId], references: [id])
}

model Videos {
  id          String   @id @default(cuid())
  userId      String
  title       String
  releaseDate DateTime
  link        String
  keywords    String
  description String
  status      String
  releaseType String
  createdAt   DateTime @default(now())

  User User @relation(fields: [userId], references: [id])
}

model Subscriptions {
  id        String   @id @default(cuid())
  userId    String   @unique
  plan      String
  status    String   @default("active")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  expiresAt DateTime

  User User @relation(fields: [userId], references: [id])
}

model CartItem {
  id          String   @id @default(cuid())
  userId      String
  productId   String
  product     String
  description String
  price       Int
  quantity    Int
  status      String   @default("active")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  User User @relation(fields: [userId], references: [id])
}

model Social {
  id         String   @id @default(cuid())
  userId     String   @unique
  apple      String?
  spotify    String?
  instagram  String?
  youtube    String?
  facebook   String?
  tiktok     String?
  twitter    String?
  soundcloud String?
  website    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  User User @relation(fields: [userId], references: [id])
}

// New Partner model to track revenue
model Partner {
  id                        String                      @id @default(cuid())
  name                      String
  password                  String
  email                     String?                     @unique
  artists                   PartnerArtist[]
  revenue                   PartnerArtistRevenue[]
  PartnerArtistSubscription PartnerArtistSubscription[]
}

model PartnerArtist {
  id        String                 @id @default(cuid())
  name      String
  image     String?
  releases  String?
  partnerId String
  revenue   PartnerArtistRevenue[]

  partner                   Partner                     @relation(fields: [partnerId], references: [id])
  PartnerArtistSubscription PartnerArtistSubscription[]
}

model PartnerArtistRevenue {
  id        String        @id @default(cuid())
  amount    Float
  date      DateTime
  artist    PartnerArtist @relation(fields: [artistId], references: [id])
  artistId  String
  partner   Partner       @relation(fields: [partnerId], references: [id])
  partnerId String
}

model PartnerArtistSubscription {
  id               String @id @default(cuid())
  artistId         String
  partnerId        String
  subscriptionPlan String

  artist  PartnerArtist @relation(fields: [artistId], references: [id])
  partner Partner       @relation(fields: [partnerId], references: [id])
}

// Smar link model to store all streaming links
model SmartLink {
  id         String   @id @default(cuid())
  url        String   @unique
  artist     String
  title      String
  image      String
  itunes     String?
  spotify    String?
  apple      String?
  amazon     String?
  deezer     String?
  tidal      String?
  youtube    String?
  audioMack  String?
  boomPlay   String?
  soundcloud String?
  createdAt  DateTime @default(now())
}

// Support ticket model --------------------------------
model Ticket {
  id              String         @id @default(cuid())
  title           String
  description     String
  status          TicketStatus   @default(OPEN)
  priority        TicketPriority @default(NORMAL)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  user            User?          @relation(fields: [userId], references: [id])
  userId          String?
  admin           AdminUser?     @relation(fields: [adminId], references: [id])
  adminId         String?
  referenceNumber String         @unique
  comments        Comment[]
}

// Define the comment model
model Comment {
  id        String     @id @default(cuid())
  content   String
  createdAt DateTime   @default(now())
  ticket    Ticket     @relation(fields: [ticketId], references: [id])
  ticketId  String
  user      User?      @relation(fields: [userId], references: [id])
  userId    String?
  admin     AdminUser? @relation(fields: [adminId], references: [id])
  adminId   String?
}

// Enum for ticket status
enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

// Enum for ticket priority
enum TicketPriority {
  LOW
  NORMAL
  HIGH
}

model Blog {
  id          String   @id @default(cuid())
  title       String
  HtmlContent String
  subtitle    String
  image       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  publishedAt DateTime @default(now())
}

model Audio {
  id               String            @id @default(cuid())
  userId           String
  title            String
  artist           String
  releaseDate      DateTime          @default(now())
  primaryGenre     String
  secondaryGenre   String
  language         String
  label            String
  copyrightHolder  String
  copyrightYear    String
  productionHolder String
  productionYear   String
  releaseCover     String
  releaseAudio     String?
  releaseAudioLink String?
  lyrics           String?
  releaseType      String
  status           String
  UPC              String            @default("")
  ISRC             String            @default("")
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @default(now())
  smartLink        String            @default("")
  Track            Track[]
  Streams          Streams[]
  StreamByCountry  StreamByCountry[]
  Store            Store[]
  MonthlyReport    MonthlyReport[]
  CountryEarnings  CountryEarnings[]

  SalesByStore SalesByStore[]

  SalesByCountry SalesByCountry[]

  SalesByMonth SalesByMonth[]
}

model Track {
  id               String  @id @default(cuid())
  audioId          String
  title            String
  lyrics           String?
  productionCredit String?
  ISRC             String?
  trackNumber      Int // Track number in the album
  audioLink        String // URL or path to track audio file

  Audio Audio @relation(fields: [audioId], references: [id])
}

model DSP {
  id      String    @id @default(cuid())
  name    String    @unique
  streams Streams[]
}

model Streams {
  id      String   @id @default(cuid())
  dspId   String
  dsp     DSP      @relation(fields: [dspId], references: [id])
  total   Int
  date    DateTime
  Audio   Audio    @relation(fields: [audioId], references: [id])
  audioId String

  @@unique([dspId, date, audioId]) // Unique constraint to avoid duplicate uploads
  // index
  @@index([audioId], name: "unique_streams")
}

model Country {
  id               String            @id @default(uuid())
  name             String            @unique
  isoCode          String            @unique
  streamsByCountry StreamByCountry[]
}

model StreamByCountry {
  id        String   @id @default(uuid())
  countryId String
  country   Country  @relation(fields: [countryId], references: [id])
  total     Int
  date      DateTime
  audioId   String
  audio     Audio    @relation(fields: [audioId], references: [id])

  // index
  @@index([audioId], name: "unique_stream_by_country")
}

// This schema is for Prisma ORM and should be placed in your `schema.prisma` file.

model Store {
  id             String @id @default(uuid())
  name           String
  trackDownloads Int
  streams        Int
  totalSales     Int
  earnings       Float
  audioId        String
  audio          Audio  @relation(fields: [audioId], references: [id])

  // index
  @@index([audioId], name: "unique_sales_by_store")
}

model CountryEarnings {
  id             String @id @default(uuid())
  name           String
  trackDownloads Int
  streams        Int
  totalSales     Int
  earnings       Float
  audioId        String
  audio          Audio  @relation(fields: [audioId], references: [id])

  // index 
  @@index([audioId], name: "unique_country_earnings")
}

model MonthlyReport {
  id             String @id @default(uuid())
  month          Int
  year           Int
  trackDownloads Int
  streams        Int
  totalSales     Int
  earnings       Float
  date           String
  audioId        String
  audio          Audio  @relation(fields: [audioId], references: [id])

  // Ensure unique reports for each month/year/store/country combo
  @@index([audioId], name: "unique_monthly_report")
}

// This schema is for Prisma ORM and should be placed in your `schema.prisma` file.

model SalesByStore {
  id             String  @id @default(uuid())
  audioId        String
  ISRC           String
  name           String
  trackDownloads Int
  streams        Int
  totalSales     Int
  earnings       Decimal
  Audio          Audio   @relation(fields: [audioId], references: [id])

  @@unique([audioId, ISRC, name])
}

model SalesByCountry {
  id             String  @id @default(uuid())
  audioId        String
  ISRC           String
  name           String
  trackDownloads Int
  streams        Int
  totalSales     Int
  earnings       Decimal
  Audio          Audio   @relation(fields: [audioId], references: [id])

  @@unique([audioId, ISRC, name])
}

model SalesByMonth {
  id             String  @id @default(uuid())
  audioId        String
  ISRC           String
  date           String
  month          Int
  year           Int
  streams        Int
  trackDownloads Int
  totalSales     Int
  earnings       Decimal
  Audio          Audio   @relation(fields: [audioId], references: [id])

  @@unique([audioId, ISRC, month, year])
}

model Document {
  id         String   @id @default(cuid())
  userId     String
  fileUrl    String
  isVerified Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Payout {
  id        String   @id @default(cuid())
  userId    String
  amount    Float
  status    String   @default("pending")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Revenue {
  id            String   @id @default(uuid())
  month         Int
  year          Int
  userId        String // Link to the User
  totalEarnings Float
  paid          Boolean  @default(false) // Indicates if the revenue has been paid out
  createdAt     DateTime @default(now()) // Timestamp for when the revenue record was created
}
